basePath: /todos
definitions:
  model.Todo:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      status:
        type: string
      task:
        type: string
      updatedAt:
        type: string
    type: object
  request.TodoRequest:
    properties:
      status:
        type: string
      task:
        type: string
    type: object
  transformer.GetTodoFailed:
    properties:
      error:
        type: string
      message:
        example: failed
        type: string
    type: object
  transformer.GetTodoSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Todo'
        type: array
      message:
        example: success
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: yusuf.hasbullah@misteraladin.com
    name: Yusuf Farhan Hasbullah
  description: ini adalah sample api spec untuk To Do List API
  version: "1.0"
paths:
  /todos:
    get:
      consumes:
      - application/json
      description: Get all todo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transformer.GetTodoSuccess'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/transformer.GetTodoFailed'
      summary: Get all Todo
      tags:
      - Todo List
    post:
      consumes:
      - application/json
      description: Create Todo List
      parameters:
      - description: Create todo payload
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/request.TodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transformer.GetTodoSuccess'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/transformer.GetTodoFailed'
      summary: Create Todo List
      tags:
      - Todo List
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Todo List
      parameters:
      - description: id todo
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transformer.GetTodoSuccess'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/transformer.GetTodoFailed'
      summary: Delete Todo List
      tags:
      - Todo List
    put:
      consumes:
      - application/json
      description: Update Todo List
      parameters:
      - description: id todo
        in: path
        name: id
        type: integer
      - description: Update todo payload
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/request.TodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transformer.GetTodoSuccess'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/transformer.GetTodoFailed'
      summary: Update Todo List
      tags:
      - Todo List
swagger: "2.0"
